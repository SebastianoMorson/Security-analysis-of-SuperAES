p = 0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA237327FFFFFFFFFFFFFFFF
g = 2
#factor or p-1
q1 = 2
q2 = 1205156213460516294276038011098783037428475274251229971327058470979054415841306114445046929130670807336613570738952006098251824478525291315971365353402504611531367372670536703348123007294680829887020513584624726600189364717085162921889329599071881596888429934762044470097788673059921772650773521873603874984881875042154463169647779984441228936206496905064565147296499973963182632029642323604865192473605840717232357219244260470063729922144429668263448160459816959
import math
def gcd(p,q):
# Create the gcd of two positive integers.
    while q != 0:
        p, q = q, p%q
    return p
def is_coprime(x, y):
    return gcd(x, y) == 1
import numpy as np
if __name__ == '__main__':
    print((np.power(g,((p-1)//q1))%p))
    print((np.power(g, ((p - 1) // q2)) % p))
    """x = 0
    exponents = []
    while g**x < p:
        print(x)
        exponents.append(x)
        x+=1
2
    coprime = []
    for e in exponents:
        if is_coprime(e,p):
            coprime.append(e)
        print(e)

    print("Numero esponenti: ", len(exponents), "\nNumero coprimi: ",len(coprime))
    """